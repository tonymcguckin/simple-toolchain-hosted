version: '2'
messages:
  $i18n: locales.yml
template:
  name:
    $ref: "#/messages/template.name"
  description:
    #original static description:
    #$ref: "#/messages/template.description"
    #template descriptions now vary depending on the flavor of source provider selected
    $ref: >
      $env.source_provider === 'githubconsolidated' ? 
      '#/messages/template.description.github' : '#/messages/template.description'
  header: '![](toolchain.svg?localize)'
  icon: icon.svg
  required:
    - sample-build
    - sample-repo
    - sample-vault
  info:
    #original static git url and branch string definitions
    #git url: >-
    #  [https://github.com/open-toolchain/simple-toolchain-hosted](https://github.com/open-toolchain/simple-toolchain-hosted)
    #git branch: >-
    #  [master](https://github.com/open-toolchain/simple-toolchain-hosted/tree/master)
    
    # compute the git url and branch values dynamically so that they remain correct when repo is forked etc. 
    # note: `repository` url param must always be provided while the `branch` url param is optional
    # the computed urls are of the same format as the original static urls shown above
    git url: >
        '[' + $env.repository + '](' + $env.repository + ')'
    git branch: >
        $env.branch ?
          '[' + $env.branch + ']('+ $env.repository + '/tree/' + $env.branch + ')' :
          '[master]('+ $env.repository + '/tree/master)'
toolchain:
  name: >
    $env.toolchainName ? '{{toolchainName}}' :
      'simple-toolchain-{{timestamp}}'
  template:
    getting_started:
      $ref: "#/messages/template.gettingStarted"

services:

  sample-repo:
    service_id: >
      $env.source_provider ? $env.source_provider : 'hostedgit'
    parameters:
      repo_name: '{{toolchain.name}}'
      repo_url: >
        $env.type === 'link' ? $env.app_repo :
          $env.sourceZipUrl ? '{{sourceZipUrl}}' :
            'https://github.com/open-toolchain/node-hello-world'
      source_repo_url: >
        $env.type === 'fork' || $env.type === 'clone' ? $env.app_repo :
          $env.sourceZipUrl ? '{{sourceZipUrl}}' : 'https://github.com/open-toolchain/node-hello-world'
      type: $env.type || 'clone'
      has_issues: true
      enable_traceability: true

  sample-build:
    service_id: pipeline
    parameters:
      services:
        - sample-repo
      name: '{{services.sample-repo.parameters.repo_name}}'
      ui_pipeline: true
      configuration:
        content:
          $text: pipeline.yml
        env:
          SAMPLE_REPO: sample-repo
          CF_APP_NAME: '{{form.pipeline.parameters.prod-app-name}}'
          PROD_SPACE_NAME: '{{form.pipeline.parameters.prod-space}}'
          PROD_ORG_NAME: '{{form.pipeline.parameters.prod-organization}}'
          PROD_REGION_ID: '{{form.pipeline.parameters.prod-region}}'
          API_KEY: '{{form.pipeline.parameters.api-key}}'
        execute: true

  webide:
    service_id: orion

  ########################################################################################
  #
  # X
  #
  # policy excludes 'list' on mount 'ibm/devops/otc-setup'
  #
  # by specifying a 'secret' property an editable inputbox with
  # this default value will be rendered instead of a combobox if
  # an internal 'list' call fails - if the internal 'list' call
  # succeeds, a combobox with a listing of secret names will be
  # rendered instead and positioned at the 'secret' name if it
  # exists within the listing...
  #
  mbp-vault:
    service_id: hashicorpvault
    parameters:
      name: mbp-vault
      server_url: "http://127.0.0.1:8200"
      path: "ibm/devops/otc-setup"
      secret: "apikeys"
      engine: "kv-2"

  ########################################################################################
  #
  # Y
  #
  # policy includes 'list' on mount 'generic/project/otc-setup'
  #
  # in the absence of a 'secret' property being declared
  # a combobox for listing secret names will be rendered
  # if an internal 'list' call succeeds on the path - if
  # the internal 'list' call fails, a blank editable inputbox
  # will be rendered instead...
  #
  vserv-vault:
    service_id: hashicorpvault
    parameters:
      name: vserv-vault
      server_url: "https://vserv-test.sos.ibm.com:8200"
      path: "generic/project/otc-setup"
      #engine: "kv-1" --> default

form:
  pipeline:
    parameters:
      prod-app-name: >
        $env.prodAppName ?
          '{{prodAppName}}' : '{{services.sample-repo.parameters.repo_name}}'
      prod-space: '{{prodSpace}}'
      prod-organization: '{{prodOrganization}}'
      prod-region: '{{prodRegion}}'

      ########################################################################################
      #
      # Y
      #
      
      # long form
      #api-key: "{vault::vserv-vault.generic/project/otc-setup/sid_api_keys.field=dev-apikey}"
      
      # one combobox allows selection of 'sid_api_keys' secret name
      # from list of secret names under the mount path...
      # only one key is found in the 'sid_api_keys' secret therefore
      # no additional combobox or inputbox is rendered for the field
      # and the 0th field is inferred and extracted automatically...
      # eg: same as specifiying {vault::vserv-vault.sid_api_keys.dev-apikey}
      
      # short form
      api-key: "{vault::vserv-vault.sid_api_keys}"
      
      ########################################################################################
      #
      # X
      #
      
      # long form
      #sid-key: "{vault::mbp-vault.ibm/devops/otc-setup/config-map.field=ibm-sidkey}"
      
      # one combobox allows selection of 'config-map' secret name
      # from list of secret names under the mount path...
      # more than one key is found in the 'config-map' secret
      # therefore a second combobox is rendered with the
      # list of key names within 'config-map'
      
      # short form
      sid-key: "{vault::mbp-vault.config-map.ibm-sidkey}"

      ########################################################################################

    schema:
      $ref: deploy.json
